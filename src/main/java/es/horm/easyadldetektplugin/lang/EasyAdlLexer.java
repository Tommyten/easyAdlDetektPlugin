// Generated from java-escape by ANTLR 4.11.1
package es.horm.easyadldetektplugin.lang;

import com.yuvalshavit.antlr4.DenterHelper;

import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue"})
public class EasyAdlLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.11.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, T__3=4, COMMENT=5, SYSTEM=6, COMPONENT=7, ID=8, 
		ARGUMENT=9, NL=10, WS=11;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	private static String[] makeRuleNames() {
		return new String[] {
			"T__0", "T__1", "T__2", "T__3", "COMMENT", "SYSTEM", "COMPONENT", "ID", 
			"ARGUMENT", "NL", "WS", "A", "B", "C", "D", "E", "F", "G", "H", "I", 
			"J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", 
			"X", "Y", "Z"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "':'", "'('", "','", "')'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, null, null, null, null, "COMMENT", "SYSTEM", "COMPONENT", "ID", 
			"ARGUMENT", "NL", "WS"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	  private final DenterHelper denter = DenterHelper.builder()
	    .nl(NL)
	    .indent(EasyAdlParser.INDENT)
	    .dedent(EasyAdlParser.DEDENT)
	    .pullToken(EasyAdlLexer.super::nextToken);

	  @Override
	  public Token nextToken() {
	    return denter.nextToken();
	  }


	public EasyAdlLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "EasyAdl.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\u0004\u0000\u000b\u00bf\u0006\uffff\uffff\u0002\u0000\u0007\u0000\u0002"+
		"\u0001\u0007\u0001\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002"+
		"\u0004\u0007\u0004\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002"+
		"\u0007\u0007\u0007\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002"+
		"\u000b\u0007\u000b\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e"+
		"\u0002\u000f\u0007\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011"+
		"\u0002\u0012\u0007\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014"+
		"\u0002\u0015\u0007\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017"+
		"\u0002\u0018\u0007\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a"+
		"\u0002\u001b\u0007\u001b\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d"+
		"\u0002\u001e\u0007\u001e\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!"+
		"\u0007!\u0002\"\u0007\"\u0002#\u0007#\u0002$\u0007$\u0001\u0000\u0001"+
		"\u0000\u0001\u0001\u0001\u0001\u0001\u0002\u0001\u0002\u0001\u0003\u0001"+
		"\u0003\u0001\u0004\u0001\u0004\u0005\u0004V\b\u0004\n\u0004\f\u0004Y\t"+
		"\u0004\u0001\u0004\u0001\u0004\u0001\u0005\u0001\u0005\u0001\u0005\u0001"+
		"\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0006\u0001\u0006\u0001"+
		"\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001"+
		"\u0006\u0001\u0006\u0001\u0007\u0004\u0007o\b\u0007\u000b\u0007\f\u0007"+
		"p\u0001\b\u0001\b\u0004\bu\b\b\u000b\b\f\bv\u0001\b\u0001\b\u0001\t\u0003"+
		"\t|\b\t\u0001\t\u0001\t\u0005\t\u0080\b\t\n\t\f\t\u0083\t\t\u0001\n\u0004"+
		"\n\u0086\b\n\u000b\n\f\n\u0087\u0001\n\u0001\n\u0001\u000b\u0001\u000b"+
		"\u0001\f\u0001\f\u0001\r\u0001\r\u0001\u000e\u0001\u000e\u0001\u000f\u0001"+
		"\u000f\u0001\u0010\u0001\u0010\u0001\u0011\u0001\u0011\u0001\u0012\u0001"+
		"\u0012\u0001\u0013\u0001\u0013\u0001\u0014\u0001\u0014\u0001\u0015\u0001"+
		"\u0015\u0001\u0016\u0001\u0016\u0001\u0017\u0001\u0017\u0001\u0018\u0001"+
		"\u0018\u0001\u0019\u0001\u0019\u0001\u001a\u0001\u001a\u0001\u001b\u0001"+
		"\u001b\u0001\u001c\u0001\u001c\u0001\u001d\u0001\u001d\u0001\u001e\u0001"+
		"\u001e\u0001\u001f\u0001\u001f\u0001 \u0001 \u0001!\u0001!\u0001\"\u0001"+
		"\"\u0001#\u0001#\u0001$\u0001$\u0001v\u0000%\u0001\u0001\u0003\u0002\u0005"+
		"\u0003\u0007\u0004\t\u0005\u000b\u0006\r\u0007\u000f\b\u0011\t\u0013\n"+
		"\u0015\u000b\u0017\u0000\u0019\u0000\u001b\u0000\u001d\u0000\u001f\u0000"+
		"!\u0000#\u0000%\u0000\'\u0000)\u0000+\u0000-\u0000/\u00001\u00003\u0000"+
		"5\u00007\u00009\u0000;\u0000=\u0000?\u0000A\u0000C\u0000E\u0000G\u0000"+
		"I\u0000\u0001\u0000\u001e\u0002\u0000\n\n\r\r\u0004\u000009AZ__az\u0003"+
		"\u0000\n\n\r\r\"\"\u0002\u0000\t\t  \u0002\u0000AAaa\u0002\u0000BBbb\u0002"+
		"\u0000CCcc\u0002\u0000DDdd\u0002\u0000EEee\u0002\u0000FFff\u0002\u0000"+
		"GGgg\u0002\u0000HHhh\u0002\u0000IIii\u0002\u0000JJjj\u0002\u0000KKkk\u0002"+
		"\u0000LLll\u0002\u0000MMmm\u0002\u0000NNnn\u0002\u0000OOoo\u0002\u0000"+
		"PPpp\u0002\u0000QQqq\u0002\u0000RRrr\u0002\u0000SSss\u0002\u0000TTtt\u0002"+
		"\u0000UUuu\u0002\u0000VVvv\u0002\u0000WWww\u0002\u0000XXxx\u0002\u0000"+
		"YYyy\u0002\u0000ZZzz\u00aa\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0003"+
		"\u0001\u0000\u0000\u0000\u0000\u0005\u0001\u0000\u0000\u0000\u0000\u0007"+
		"\u0001\u0000\u0000\u0000\u0000\t\u0001\u0000\u0000\u0000\u0000\u000b\u0001"+
		"\u0000\u0000\u0000\u0000\r\u0001\u0000\u0000\u0000\u0000\u000f\u0001\u0000"+
		"\u0000\u0000\u0000\u0011\u0001\u0000\u0000\u0000\u0000\u0013\u0001\u0000"+
		"\u0000\u0000\u0000\u0015\u0001\u0000\u0000\u0000\u0001K\u0001\u0000\u0000"+
		"\u0000\u0003M\u0001\u0000\u0000\u0000\u0005O\u0001\u0000\u0000\u0000\u0007"+
		"Q\u0001\u0000\u0000\u0000\tS\u0001\u0000\u0000\u0000\u000b\\\u0001\u0000"+
		"\u0000\u0000\rc\u0001\u0000\u0000\u0000\u000fn\u0001\u0000\u0000\u0000"+
		"\u0011r\u0001\u0000\u0000\u0000\u0013{\u0001\u0000\u0000\u0000\u0015\u0085"+
		"\u0001\u0000\u0000\u0000\u0017\u008b\u0001\u0000\u0000\u0000\u0019\u008d"+
		"\u0001\u0000\u0000\u0000\u001b\u008f\u0001\u0000\u0000\u0000\u001d\u0091"+
		"\u0001\u0000\u0000\u0000\u001f\u0093\u0001\u0000\u0000\u0000!\u0095\u0001"+
		"\u0000\u0000\u0000#\u0097\u0001\u0000\u0000\u0000%\u0099\u0001\u0000\u0000"+
		"\u0000\'\u009b\u0001\u0000\u0000\u0000)\u009d\u0001\u0000\u0000\u0000"+
		"+\u009f\u0001\u0000\u0000\u0000-\u00a1\u0001\u0000\u0000\u0000/\u00a3"+
		"\u0001\u0000\u0000\u00001\u00a5\u0001\u0000\u0000\u00003\u00a7\u0001\u0000"+
		"\u0000\u00005\u00a9\u0001\u0000\u0000\u00007\u00ab\u0001\u0000\u0000\u0000"+
		"9\u00ad\u0001\u0000\u0000\u0000;\u00af\u0001\u0000\u0000\u0000=\u00b1"+
		"\u0001\u0000\u0000\u0000?\u00b3\u0001\u0000\u0000\u0000A\u00b5\u0001\u0000"+
		"\u0000\u0000C\u00b7\u0001\u0000\u0000\u0000E\u00b9\u0001\u0000\u0000\u0000"+
		"G\u00bb\u0001\u0000\u0000\u0000I\u00bd\u0001\u0000\u0000\u0000KL\u0005"+
		":\u0000\u0000L\u0002\u0001\u0000\u0000\u0000MN\u0005(\u0000\u0000N\u0004"+
		"\u0001\u0000\u0000\u0000OP\u0005,\u0000\u0000P\u0006\u0001\u0000\u0000"+
		"\u0000QR\u0005)\u0000\u0000R\b\u0001\u0000\u0000\u0000SW\u0005#\u0000"+
		"\u0000TV\b\u0000\u0000\u0000UT\u0001\u0000\u0000\u0000VY\u0001\u0000\u0000"+
		"\u0000WU\u0001\u0000\u0000\u0000WX\u0001\u0000\u0000\u0000XZ\u0001\u0000"+
		"\u0000\u0000YW\u0001\u0000\u0000\u0000Z[\u0006\u0004\u0000\u0000[\n\u0001"+
		"\u0000\u0000\u0000\\]\u0003;\u001d\u0000]^\u0003G#\u0000^_\u0003;\u001d"+
		"\u0000_`\u0003=\u001e\u0000`a\u0003\u001f\u000f\u0000ab\u0003/\u0017\u0000"+
		"b\f\u0001\u0000\u0000\u0000cd\u0003\u001b\r\u0000de\u00033\u0019\u0000"+
		"ef\u0003/\u0017\u0000fg\u00035\u001a\u0000gh\u00033\u0019\u0000hi\u0003"+
		"1\u0018\u0000ij\u0003\u001f\u000f\u0000jk\u00031\u0018\u0000kl\u0003="+
		"\u001e\u0000l\u000e\u0001\u0000\u0000\u0000mo\u0007\u0001\u0000\u0000"+
		"nm\u0001\u0000\u0000\u0000op\u0001\u0000\u0000\u0000pn\u0001\u0000\u0000"+
		"\u0000pq\u0001\u0000\u0000\u0000q\u0010\u0001\u0000\u0000\u0000rt\u0005"+
		"\"\u0000\u0000su\b\u0002\u0000\u0000ts\u0001\u0000\u0000\u0000uv\u0001"+
		"\u0000\u0000\u0000vw\u0001\u0000\u0000\u0000vt\u0001\u0000\u0000\u0000"+
		"wx\u0001\u0000\u0000\u0000xy\u0005\"\u0000\u0000y\u0012\u0001\u0000\u0000"+
		"\u0000z|\u0005\r\u0000\u0000{z\u0001\u0000\u0000\u0000{|\u0001\u0000\u0000"+
		"\u0000|}\u0001\u0000\u0000\u0000}\u0081\u0005\n\u0000\u0000~\u0080\u0005"+
		" \u0000\u0000\u007f~\u0001\u0000\u0000\u0000\u0080\u0083\u0001\u0000\u0000"+
		"\u0000\u0081\u007f\u0001\u0000\u0000\u0000\u0081\u0082\u0001\u0000\u0000"+
		"\u0000\u0082\u0014\u0001\u0000\u0000\u0000\u0083\u0081\u0001\u0000\u0000"+
		"\u0000\u0084\u0086\u0007\u0003\u0000\u0000\u0085\u0084\u0001\u0000\u0000"+
		"\u0000\u0086\u0087\u0001\u0000\u0000\u0000\u0087\u0085\u0001\u0000\u0000"+
		"\u0000\u0087\u0088\u0001\u0000\u0000\u0000\u0088\u0089\u0001\u0000\u0000"+
		"\u0000\u0089\u008a\u0006\n\u0001\u0000\u008a\u0016\u0001\u0000\u0000\u0000"+
		"\u008b\u008c\u0007\u0004\u0000\u0000\u008c\u0018\u0001\u0000\u0000\u0000"+
		"\u008d\u008e\u0007\u0005\u0000\u0000\u008e\u001a\u0001\u0000\u0000\u0000"+
		"\u008f\u0090\u0007\u0006\u0000\u0000\u0090\u001c\u0001\u0000\u0000\u0000"+
		"\u0091\u0092\u0007\u0007\u0000\u0000\u0092\u001e\u0001\u0000\u0000\u0000"+
		"\u0093\u0094\u0007\b\u0000\u0000\u0094 \u0001\u0000\u0000\u0000\u0095"+
		"\u0096\u0007\t\u0000\u0000\u0096\"\u0001\u0000\u0000\u0000\u0097\u0098"+
		"\u0007\n\u0000\u0000\u0098$\u0001\u0000\u0000\u0000\u0099\u009a\u0007"+
		"\u000b\u0000\u0000\u009a&\u0001\u0000\u0000\u0000\u009b\u009c\u0007\f"+
		"\u0000\u0000\u009c(\u0001\u0000\u0000\u0000\u009d\u009e\u0007\r\u0000"+
		"\u0000\u009e*\u0001\u0000\u0000\u0000\u009f\u00a0\u0007\u000e\u0000\u0000"+
		"\u00a0,\u0001\u0000\u0000\u0000\u00a1\u00a2\u0007\u000f\u0000\u0000\u00a2"+
		".\u0001\u0000\u0000\u0000\u00a3\u00a4\u0007\u0010\u0000\u0000\u00a40\u0001"+
		"\u0000\u0000\u0000\u00a5\u00a6\u0007\u0011\u0000\u0000\u00a62\u0001\u0000"+
		"\u0000\u0000\u00a7\u00a8\u0007\u0012\u0000\u0000\u00a84\u0001\u0000\u0000"+
		"\u0000\u00a9\u00aa\u0007\u0013\u0000\u0000\u00aa6\u0001\u0000\u0000\u0000"+
		"\u00ab\u00ac\u0007\u0014\u0000\u0000\u00ac8\u0001\u0000\u0000\u0000\u00ad"+
		"\u00ae\u0007\u0015\u0000\u0000\u00ae:\u0001\u0000\u0000\u0000\u00af\u00b0"+
		"\u0007\u0016\u0000\u0000\u00b0<\u0001\u0000\u0000\u0000\u00b1\u00b2\u0007"+
		"\u0017\u0000\u0000\u00b2>\u0001\u0000\u0000\u0000\u00b3\u00b4\u0007\u0018"+
		"\u0000\u0000\u00b4@\u0001\u0000\u0000\u0000\u00b5\u00b6\u0007\u0019\u0000"+
		"\u0000\u00b6B\u0001\u0000\u0000\u0000\u00b7\u00b8\u0007\u001a\u0000\u0000"+
		"\u00b8D\u0001\u0000\u0000\u0000\u00b9\u00ba\u0007\u001b\u0000\u0000\u00ba"+
		"F\u0001\u0000\u0000\u0000\u00bb\u00bc\u0007\u001c\u0000\u0000\u00bcH\u0001"+
		"\u0000\u0000\u0000\u00bd\u00be\u0007\u001d\u0000\u0000\u00beJ\u0001\u0000"+
		"\u0000\u0000\u0007\u0000Wpv{\u0081\u0087\u0002\u0006\u0000\u0000\u0000"+
		"\u0001\u0000";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}